#caso o elastic reclame que o max_map_count da vm esteja muito baixo
#docker run --rm --privileged=true alpine:latest sysctl -w vm.max_map_count=262144

#Referencia= https://www.elastic.co/pt/blog/getting-started-with-the-elastic-stack-and-docker-compose-part-2
##Copiar certificado do container do elasticsearch para uma pasta (Temp no caso)##
#docker cp es01:/usr/share/elasticsearch/config/certs/ca/ca.crt C:\Temp\.

#colar certificado no kibana -> fleet -> settings -> outputs -> actions -> advanced yaml configuration

#ssl:
# certificate_authorities:
# - |
#   certificado_aqui

#mudar host para nome do container rodando o elastic e http -> https

#extrair fingerprint do certificado sem openssl ->
# $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("C:\Temp\ca.crt")
##calcula o fingerprint##
#$cert.GetCertHashString("SHA256")
##Resultado parecido com o valor abaixo
# 0441E5C711506DD59808E25B926FBB14164E5BCC00A8C15F4B0EB5BB2C4DC911

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  fleetserverdata:
    driver: local
  mysqldata:
    driver: local
#  metricbeatdata01:
#    driver: local

networks:
  default:
    name: evolve
    driver: bridge
#    external: true

services:
  setup:
    container_name: setup
    image: registry-docker.weg.net/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./setup_services.sh:/usr/local/bin/setup_services.sh
    user: "0"
    command: ["/usr/local/bin/setup_services.sh"]
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    container_name: es01
#    depends_on:
#      setup:
#        condition: service_healthy
    image: registry-docker.weg.net/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    env_file: ./elasticsearch.env
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  kibana:
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
      package-registry:
        condition: service_healthy
    image: registry-docker.weg.net/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - FLEET_ELASTICSEARCH_HOSTS=https://es01:9200
      - FLEET_ELASTICSEARCH_SSL_CERTIFICATE_AUTHORITIES=/usr/share/fleet/config/certs/ca.crt
    env_file:
      - .env
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca/ca.crt https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  otel-collector:
    image: registry-docker.weg.net/otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yml:/otel-local-config.yaml
    env_file: ./otel-collector.env
    mem_limit: ${DF_MEM_LIMIT}
    command: ["--config", "/otel-local-config.yaml"]

  otel-collector2:
    image: registry-docker.weg.net/otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector2
    volumes:
      - ./otel-collector-config.yml:/otel-local-config.yaml
    env_file: ./otel-collector.env
    mem_limit: ${DF_MEM_LIMIT}
    command: [ "--config", "/otel-local-config.yaml" ]


  evolve-api:
    image: evolve-api:latest
    container_name: evolve-api
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - 8087
    env_file: ./evolve-api.env
    depends_on:
      - kibana
      - fleet-server
      - mysql


  mysql:
    image: registry-docker.weg.net/mysql:latest
    container_name: mysql
    restart: always  # Configura o container para reiniciar automaticamente em caso de falha
    environment:
      MYSQL_ROOT_PASSWORD: root  # Define a senha do usu√°rio root
      MYSQL_DATABASE: evolve  # Define o nome do banco de dados a ser criado
    expose:
      - 3306
    volumes:
      - mysqldata:/var/lib/mysql  # Monta um volume para persistir os dados do MySQL
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"


  loadbalancer:
    image: registry-docker.weg.net/nginx:stable
    container_name: loadbalancer
    ports:
      - "8087:8087"
    depends_on:
      - evolve-api
      - otel-collector
      - otel-collector2
    expose:
      - 8087
      - 4318
      - 4317
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf


  fleet-server:
    container_name: fleet-server
    depends_on:
      kibana:
        condition: service_healthy
    image: registry-docker.weg.net/beats/elastic-agent:${STACK_VERSION}
    volumes:
      - ./artifacts/kibana/config/setup_fleet.sh:/usr/local/bin/setup_fleet.sh
      - ./artifacts/kibana/config/kibana_imports.sh:/usr/local/bin/kibana_imports.sh
      - ./artifacts/kibana/saved_objects:/usr/local/bin/saved_objects
      - certs:/certs
      - fleetserverdata:/usr/share/elastic-agent
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    entrypoint: ["/bin/sh", "-c", "/usr/local/bin/setup_fleet.sh && /usr/local/bin/kibana_imports.sh && /usr/local/bin/docker-entrypoint"]
    ports:
      - ${FLEET_PORT}:8220
      - ${APMSERVER_PORT}:8200
    user: root
    env_file: ./fleet-server.env

  package-registry:
    image: registry-docker.weg.net/package-registry/distribution:lite-${STACK_VERSION}
    container_name: package-registry
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "curl -I http://localhost:8080 | grep '200'" ]
      interval: 10s
      timeout: 10s
      retries: 120


#  metricbeat01:
#    container_name: metricbeat01
#    depends_on:
#      kibana:
#        condition: service_healthy
#    image: registry-docker.weg.net/beats/metricbeat:${STACK_VERSION}
#    user: root
#    volumes:
#      - certs:/usr/share/metricbeat/certs
#      - metricbeatdata01:/usr/share/metricbeat/data
#      - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
#      - "/proc:/hostfs/proc:rw"
#      - "/:/hostfs:rw"
#    environment:
#      - ELASTIC_USER=elastic
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#      - ELASTIC_HOSTS=https://es01:9200
#      - KIBANA_HOSTS=https://kibana:5601
#      - CA_CERT=certs/ca/ca.crt
#      - ES_CERT=certs/es01/es01.crt
#      - ES_KEY=certs/es01/es01.key
#      - KB_CERT=certs/kibana/kibana.crt
#      - KB_KEY=certs/kibana/kibana.key
#    command:
#      - --strict.perms=false